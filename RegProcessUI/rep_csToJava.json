{
  "Items": [
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "AppendFormat",
      "Pattern": "[Aa]ppendFormat\\((.+)\\);",
      "RepalceTo": "append(StringUtil.format($1));",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "String.Format",
      "Pattern": "String\\.[Ff]ormat\\(",
      "RepalceTo": "StringUtil.format(",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "%1$s",
      "Pattern": "%(\\d+)\\$\\w",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string idx = m.Groups[1].Value;\r\n    return \"{\" + (Convert.ToInt32(idx)-1) + \"}\";\r\n}",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "AppSettings",
      "Pattern": "ConfigurationManager\\.AppSettings",
      "RepalceTo": "WebConfig",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "String.valueOf",
      "Pattern": "String\\.valueOf\\(",
      "RepalceTo": "Convert.toString(",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "tryParseInt",
      "Pattern": "com.util.TryParseHelper.tryParseInt",
      "RepalceTo": "IntParser.tryParse",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "RefObject",
      "Pattern": "com.util.OutObject",
      "RepalceTo": "RefObject",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "argvalue",
      "Pattern": "\\.argValue",
      "RepalceTo": ".argvalue",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "kayang.",
      "Pattern": "([^\\.])kayang\\.",
      "RepalceTo": "$1com.kayang.",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "com.util.StringHelper",
      "Pattern": "com\\.util\\.StringHelper",
      "RepalceTo": "StringUtil",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "LocalDateTime.parse",
      "Pattern": "LocalDateTime\\.parse\\b",
      "RepalceTo": "DateUtil.toDate",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Request[\"xxx\"]",
      "Pattern": "\\bRequest\\.?(?:Form|QueryString)?\\[([\\w\"\\-\\s\\+]+)\\]",
      "RepalceTo": "getParameter($1)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Request.Cookie[\"\"]",
      "Pattern": "\\bRequest\\.Cookies\\[([\\w\"\\-\\s\\+]+)\\]",
      "RepalceTo": "CookieUtil.getValue(request, $1)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "dv[i][j]",
      "Pattern": "(\\w+)\\[([\\w\"\\+\\s\\-]+)\\]\\[([\\w\"\\+\\s\\-]+)\\]",
      "RepalceTo": "$1.get($2).get($3)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "[\"xxx\"]",
      "Pattern": "([\\w\\)\\]])\\[(\"[\\w\"\\-\\s\\+]+\")\\]",
      "RepalceTo": "$1.get($2)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Pattern.CASE_INSENSITIVE",
      "Pattern": "RegexOptions\\.IgnoreCase\\.getValue\\(\\)",
      "RepalceTo": "Pattern.CASE_INSENSITIVE",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "DBNull.Value",
      "Pattern": "DBNull\\.Value",
      "RepalceTo": "Convert.DBNull",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "XmlNode",
      "Pattern": "XmlNode",
      "RepalceTo": "Node",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "XmlDocument",
      "Pattern": "XmlDocument",
      "RepalceTo": "Document",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "LocalDateTime.TryParse",
      "Pattern": "LocalDateTime\\.TryParse",
      "RepalceTo": "DateUtil.tryParse",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "BigDecimal.TryParse",
      "Pattern": "BigDecimal\\.TryParse",
      "RepalceTo": "DecimalParser.tryParse",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(Data|dv|dt)\\.Count",
      "Pattern": "(Data|dv|dt)\\.Count",
      "RepalceTo": "$1.size()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Hashtable",
      "Pattern": "\\bHashtable\\b",
      "RepalceTo": "HashMap",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "import-lower",
      "Pattern": "import\\s+([\\w\\.\\*]+?)(\\.[\\w\\*]+;\\r?\\n)",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    var items = m.Groups[1].Value.ToLower();\r\n    return \"import \" + items + m.Groups[2].Value;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Groups[1].Value",
      "Pattern": "Groups(\\.get\\(|\\[)([\\w\"]+)(\\)|\\]).Value",
      "RepalceTo": "group($2)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "DataView.Table.Columns.Contains",
      "Pattern": "(\\b(get)?Row\\(?\\)?\\.)?(\\b(get)?DataView\\(?\\)?\\.)?(\\b(get)?Table\\(?\\)?\\.)?\\b(get)?Columns\\(?\\)?\\.[cC]ontains\\(",
      "RepalceTo": "containColName(",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "com.util.$1",
      "Pattern": "com\\.util\\.(\\w+)",
      "RepalceTo": "$1",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Columns.Add",
      "Pattern": "\\.Columns\\.Add\\(",
      "RepalceTo": ".addColumn(",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "RegexOptions.Compiled",
      "Pattern": "\\s?[\\|,]?\\s*\\S*RegexOptions\\.Compiled(\\.getValue\\(\\))?",
      "RepalceTo": "",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "RegexOptions.Multiline",
      "Pattern": "RegexOptions\\.Multiline(\\.getValue\\(\\))?",
      "RepalceTo": "Pattern.MULTILINE",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "RegexOptions.IgnoreCase",
      "Pattern": "RegexOptions\\.IgnoreCase(\\.getValue\\(\\))?",
      "RepalceTo": "Pattern.CASE_INSENSITIVE",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "import com.kayang.log.*;",
      "Pattern": "import com\\.kayang\\.log\\.\\*;",
      "RepalceTo": "",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "大写方法改小写",
      "Pattern": "\\.([A-Z])(\\w+\\()",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n        return \".\" + m.Groups[1].Value.ToLower()+ m.Groups[2].Value;\r\n}",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "还原new 大小xx",
      "Pattern": "(new [\\w\\.]+\\.)([a-z])(\\w+\\()",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n        return m.Groups[1].Value+ m.Groups[2].Value.ToUpper()+m.Groups[3].Value;\r\n}",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "属性改getXXX()",
      "Pattern": "(?<!(?:class |\\||\\w\\s|~))\\b(LGID|HRID|DBType|Rows|Unique|Columns|ColumnName|EmpID|UserAccount|IsMobile|UniqueInstance)\\b([^\\( \"=\\}\\|])",
      "RepalceTo": "get$1()$2",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "xx.Count",
      "Pattern": "\\b\\.Count\\b",
      "RepalceTo": ".size()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "dv.get",
      "Pattern": "(\\w+)\\.get\\((\\w+)\\)\\.get\\(([^\\)]+)\\)\\.toString\\(\\)",
      "RepalceTo": "Convert.toString($1.get($2).get($3))",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "getAuditType().values()[0]",
      "Pattern": "(get)?(\\w+)(\\(\\))?\\.values\\(\\)\\[(\\d+)\\]",
      "RepalceTo": "$2.forValue($4)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "HashMap<>(StringComparer.OrdinalIgnoreCase",
      "Pattern": "\\w+\\<String, (\\w+)\\>\\([\\w\\.]*StringComparer\\.OrdinalIgnoreCase\\)",
      "RepalceTo": "HashMapIgnoreCase<$1>()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "LogHelper",
      "Pattern": "(loger|com.kayang.[Ll]og.LogHelper|Kayang.Log.LogHelper)",
      "RepalceTo": "LogHelper",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "pageLoad",
      "Pattern": "pageLoad\\(Object sender, EventArgs e\\)",
      "RepalceTo": "onPageLoad()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "onLoad",
      "Pattern": "[Oo]n(\\w+)\\(EventArgs e\\)",
      "RepalceTo": "on$1()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Func1Param",
      "Pattern": "\\b(Func|Action)(\\d*)Param\\b",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string num = m.Groups[2].Value;\r\n    if (num == \"1\" || num == \"0\") num = \"\";\r\n    return m.Groups[1].Value + num;\r\n}",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "com.kayang.ajax.CallBack",
      "Pattern": "com\\.kayang\\.ajax\\.Callback",
      "RepalceTo": "Callback",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "com.kayang.Crypt.Crypt3DES",
      "Pattern": "com.kayang.[cC]rypt.([A-Z]\\w+)",
      "RepalceTo": "$1",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "LocalDateTime.getNow()",
      "Pattern": "LocalDateTime\\.get([A-Z])(\\w*)\\(",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    return \"LocalDateTime.\" + m.Groups[1].Value.ToLower() + m.Groups[2].Value + \"(\";\r\n}",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": ".addRow",
      "Pattern": "\\.getRows\\(\\)\\.add\\(",
      "RepalceTo": ".addRow(",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": ".UserContext",
      "Pattern": "(?<!ore)\\.UserContext\\.",
      "RepalceTo": ".getUserContext().",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "stream().toArray()",
      "Pattern": "\\.\\<([\\w\\[\\]\\<\\>]+)\\>OfType\\(\\).stream\\(\\)(.+)\\.toArray\\(\\)",
      "RepalceTo": ".stream().map(i -> ($1)i)$2.toArray($1::new)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "OfType",
      "Pattern": "\\.\\<([\\w\\[\\]\\<\\>]+)\\>OfType\\(\\).stream\\(\\)",
      "RepalceTo": ".stream().map(i -> ($1)i)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "DataEventHandler2",
      "Pattern": "\\b(DataEventHandler|DataEventArgs)(\\<\\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?\\>)",
      "RepalceTo": "${1}2$2",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "DataEventHandler3",
      "Pattern": "\\b(DataEventHandler|DataEventArgs)(\\<\\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?\\>)",
      "RepalceTo": "${1}3$2",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "DataEventHandler4",
      "Pattern": "\\b(DataEventHandler|DataEventArgs)(\\<\\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?, \\w[\\w\\<\\>\\[\\]]+?\\>)",
      "RepalceTo": "${1}4$2",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "LocalDateTime.Today",
      "Pattern": "LocalDateTime\\.Today",
      "RepalceTo": "DateUtil.today()",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "for (DataEventHandler",
      "Pattern": "for \\(DataEventHandler\\d?\\<.+?(\\w+)\\.+listeners\\(\\)\\) \\{\\s+listener\\.invoke\\(this, (.+?)\\);\\r?\\n\\s+\\}",
      "RepalceTo": "$1.fire(this, $2);",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Event<DataEventHandler3<Context, Form, KDataGrid>>",
      "Pattern": "\\bEvent\\<DataEventHandler(\\d?\\<.+?\\>)\\>",
      "RepalceTo": "DataEvent$1",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(JArray)JsonConvert.deserializeObject",
      "Pattern": "\\([\\w\\.]*JArray\\)[\\w\\.]*JsonConvert\\.deserializeObject\\(([^\\)]+)\\)",
      "RepalceTo": "JsonConvert.deserializeList($1, HashMap.class)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "JArray",
      "Pattern": "[\\w\\.]*\\bJArray",
      "RepalceTo": "List<HashMap>",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "JToken",
      "Pattern": "[\\w\\.]*\\bJToken",
      "RepalceTo": "HashMap",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "ex.StackTrace",
      "Pattern": "(\\w+)\\.StackTrace",
      "RepalceTo": "SysException.getStackMsg($1)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "set属性",
      "Pattern": "(?<=\\n\\s*)\\b(\\w+)\\.([A-Z]\\w+) = (.+?);(( //.+)?\\r?\\n)",
      "RepalceTo": "$1.set$2($3);$4",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "XmlAttribute",
      "Pattern": "XmlAttribute",
      "RepalceTo": "Attribute",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "toString(\"yyyy",
      "Pattern": "(\\w+)\\.toString\\(\"yyyy",
      "RepalceTo": "DateUtil.formatDate($1, \"yyyy",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": ".split(new String[] {",
      "Pattern": "(\\w+)\\.split\\(new String\\[\\] \\{(.+?)\\}",
      "RepalceTo": "StringUtil.split($1, $2",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(\\w+).indexOf\\((.+?), StringComparison.CurrentCultureIgnoreCase\\)",
      "Pattern": "(\\w+).indexOf\\((.+?), StringComparison.CurrentCultureIgnoreCase\\)",
      "RepalceTo": "StringUtil.indexOfIgnoreCase($1, $2)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "import handler.*;",
      "Pattern": "import handler\\.\\*;\\r?\\n",
      "RepalceTo": "",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(int)",
      "Pattern": "\\(([Ii]nteger|int)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"IntParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(bool)",
      "Pattern": "\\(([Bb]oolean|bool)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"BoolParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(Double)",
      "Pattern": "\\(([Dd]ouble)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"DoubleParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(Float)",
      "Pattern": "\\(([Ff]loat)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"FloatParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(DateTime)",
      "Pattern": "\\((LocalDateTime|DateTime|Date)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"DateParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "(Decimal)",
      "Pattern": "\\((BigDecimal|[Dd]ecimal)\\)\\s*(\\w+(\\.\\w+\\([\\\"\\w][\\w\\\"\\s\\+]*?\\))+|\\w+\\b)(?=[^\\.\\(\\<\\[])",
      "RepalceTo": "public static string ReplaceEach(Match m)\r\n{\r\n    string src = m.Value;\r\n    var g2 = m.Groups[2].Value;\r\n    if(g2 != \"new\"){\r\n       return \"DecimalParser.getResult(\" + g2 + \")\";\r\n    }\r\n    return src;\r\n}\r\n",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 1
    },
    {
      "Disabled": true,
      "NoReg": false,
      "Title": "equalDBNull",
      "Pattern": "(.+)\\.equals\\(Convert.DBNull\\) \\? (.+) : (.+)\\1",
      "RepalceTo": "$3Convert.isDBNull($1, $2)",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "row[].toString",
      "Pattern": "\\b(\\)|\\w*row|\\w*view|\\w*d?rv?|d?rv?(?:[^e]\\w*)?)\\.get\\(([\"\\w \\.\\+]+)\\).toString\\(\\)",
      "RepalceTo": "$1.getString($2)",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": ".toString()",
      "Pattern": "([^\\.])\\b(\\w+)\\.(get\\w*)\\(([\"\\w \\.\\+]+)\\).toString\\(\\)",
      "RepalceTo": "$1Convert.toString($2.$3($4))",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "tryGet",
      "Pattern": "([\\w\\.\\<\\>]+) (\\w+);(\\s+)if \\(!\\((\\w+).containsKey\\(([\\w\\\"]+)\\) \\? \\(\\2 = \\4.get\\(\\5\\)\\) == \\2 : false\\)\\) \\{",
      "RepalceTo": "$1 $2 = $4.get($5);$3if ($2 == null) {",
      "IgnoreCase": true,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "Event",
      "Pattern": "([A-Z]\\w+) != null( && !\\1\\.isEmpty\\(\\))?([\\s\\S]{1,500}?\\s*\\1\\.fire)",
      "RepalceTo": "$1 != null && !$1.isEmpty()$3",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "OrderedDict",
      "Pattern": "\\bOrderedDict\\b",
      "RepalceTo": "LinkedHashMap",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    },
    {
      "Disabled": false,
      "NoReg": false,
      "Title": "ActionResult",
      "Pattern": "public ActionResult",
      "RepalceTo": "public ResponseEntity<?>",
      "IgnoreCase": false,
      "Global": true,
      "Boundary": false,
      "RepType": 0
    }
  ],
  "Title": "csToJava",
  "Order": 6
}